/* tslint:disable */
/* eslint-disable */
/*
The Helcim API

This API covers publicly accessible merchant actions

The version of the OpenAPI document: 2.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { BankDataBankData } from '../models';
// @ts-ignore
import { CaptureRequest } from '../models';
// @ts-ignore
import { Card } from '../models';
// @ts-ignore
import { CardDataCardData } from '../models';
// @ts-ignore
import { FailedPaymentResponse } from '../models';
// @ts-ignore
import { PaymentRequestInvoice } from '../models';
// @ts-ignore
import { PurchaseRequest } from '../models';
// @ts-ignore
import { RefundRequest } from '../models';
// @ts-ignore
import { RefundRequest1 } from '../models';
// @ts-ignore
import { SuccessfulAchTransactionResponse } from '../models';
// @ts-ignore
import { SuccessfulPaymentResponse } from '../models';
// @ts-ignore
import { VerifyRequest } from '../models';
// @ts-ignore
import { VerifyRequestInvoice } from '../models';
// @ts-ignore
import { WithdrawRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export const PaymentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Process Capture Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {CaptureRequest} [captureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processCaptureTransaction: async (idempotencyKey: string, captureRequest?: CaptureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('processCaptureTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/capture`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: captureRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/capture',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(captureRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Preauth Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {PurchaseRequest} [purchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPreauthTransaction: async (idempotencyKey: string, purchaseRequest?: PurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('processPreauthTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/preauth`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: purchaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/preauth',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Purchase Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {PurchaseRequest} [purchaseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPurchaseTransaction: async (idempotencyKey: string, purchaseRequest?: PurchaseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('processPurchaseTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: purchaseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/purchase',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(purchaseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Refund Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {RefundRequest} [refundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processRefundTransaction: async (idempotencyKey: string, refundRequest?: RefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('processRefundTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/refund`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/refund',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Withdraw Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {WithdrawRequest} [withdrawRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWithdrawalTransaction: async (idempotencyKey: string, withdrawRequest?: WithdrawRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('processWithdrawalTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: withdrawRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/withdraw',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(withdrawRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Reverse Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {RefundRequest1} [refundRequest1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseTransaction: async (idempotencyKey: string, refundRequest1?: RefundRequest1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('reverseTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/reverse`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: refundRequest1,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/reverse',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(refundRequest1, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Process Verify Transaction
         * @param {string} idempotencyKey Idempotency Key. Alphanumeric 25-characters
         * @param {VerifyRequest} [verifyRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTransaction: async (idempotencyKey: string, verifyRequest?: VerifyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'idempotencyKey' is not null or undefined
            assertParamExists('verifyTransaction', 'idempotencyKey', idempotencyKey)
            const localVarPath = `/payment/verify`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (idempotencyKey != null) {
                localVarHeaderParameter['idempotency-key'] = String(idempotencyKey);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: verifyRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/payment/verify',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(verifyRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PaymentApi - functional programming interface
 * @export
 */
export const PaymentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PaymentApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Process Capture Transaction
         * @param {PaymentApiProcessCaptureTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processCaptureTransaction(requestParameters: PaymentApiProcessCaptureTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const captureRequest: CaptureRequest = {
                preAuthTransactionId: requestParameters.preAuthTransactionId,
                amount: requestParameters.amount,
                ipAddress: requestParameters.ipAddress,
                ecommerce: requestParameters.ecommerce
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processCaptureTransaction(requestParameters.idempotencyKey, captureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Preauth Transaction
         * @param {PaymentApiProcessPreauthTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processPreauthTransaction(requestParameters: PaymentApiProcessPreauthTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const purchaseRequest: PurchaseRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processPreauthTransaction(requestParameters.idempotencyKey, purchaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Purchase Transaction
         * @param {PaymentApiProcessPurchaseTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processPurchaseTransaction(requestParameters: PaymentApiProcessPurchaseTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const purchaseRequest: PurchaseRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processPurchaseTransaction(requestParameters.idempotencyKey, purchaseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Refund Transaction
         * @param {PaymentApiProcessRefundTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processRefundTransaction(requestParameters: PaymentApiProcessRefundTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const refundRequest: RefundRequest = {
                originalTransactionId: requestParameters.originalTransactionId,
                amount: requestParameters.amount,
                ipAddress: requestParameters.ipAddress,
                ecommerce: requestParameters.ecommerce
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processRefundTransaction(requestParameters.idempotencyKey, refundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Withdraw Transaction
         * @param {PaymentApiProcessWithdrawalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async processWithdrawalTransaction(requestParameters: PaymentApiProcessWithdrawalTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulAchTransactionResponse>> {
            const withdrawRequest: WithdrawRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.processWithdrawalTransaction(requestParameters.idempotencyKey, withdrawRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Reverse Transaction
         * @param {PaymentApiReverseTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reverseTransaction(requestParameters: PaymentApiReverseTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const refundRequest1: RefundRequest1 = {
                cardTransactionId: requestParameters.cardTransactionId,
                ipAddress: requestParameters.ipAddress,
                ecommerce: requestParameters.ecommerce
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.reverseTransaction(requestParameters.idempotencyKey, refundRequest1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Process Verify Transaction
         * @param {PaymentApiVerifyTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async verifyTransaction(requestParameters: PaymentApiVerifyTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const verifyRequest: VerifyRequest = {
                ipAddress: requestParameters.ipAddress,
                ecommerce: requestParameters.ecommerce,
                currency: requestParameters.currency,
                customerCode: requestParameters.customerCode,
                invoiceNumber: requestParameters.invoiceNumber,
                invoice: requestParameters.invoice,
                cardData: requestParameters.cardData,
                billingAddress: requestParameters.billingAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.verifyTransaction(requestParameters.idempotencyKey, verifyRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PaymentApi - factory interface
 * @export
 */
export const PaymentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PaymentApiFp(configuration)
    return {
        /**
         * 
         * @summary Process Capture Transaction
         * @param {PaymentApiProcessCaptureTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processCaptureTransaction(requestParameters: PaymentApiProcessCaptureTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.processCaptureTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Preauth Transaction
         * @param {PaymentApiProcessPreauthTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPreauthTransaction(requestParameters: PaymentApiProcessPreauthTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.processPreauthTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Purchase Transaction
         * @param {PaymentApiProcessPurchaseTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processPurchaseTransaction(requestParameters: PaymentApiProcessPurchaseTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.processPurchaseTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Refund Transaction
         * @param {PaymentApiProcessRefundTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processRefundTransaction(requestParameters: PaymentApiProcessRefundTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.processRefundTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Withdraw Transaction
         * @param {PaymentApiProcessWithdrawalTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        processWithdrawalTransaction(requestParameters: PaymentApiProcessWithdrawalTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulAchTransactionResponse> {
            return localVarFp.processWithdrawalTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Reverse Transaction
         * @param {PaymentApiReverseTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reverseTransaction(requestParameters: PaymentApiReverseTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.reverseTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Process Verify Transaction
         * @param {PaymentApiVerifyTransactionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        verifyTransaction(requestParameters: PaymentApiVerifyTransactionRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.verifyTransaction(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for processCaptureTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiProcessCaptureTransactionRequest
 */
export type PaymentApiProcessCaptureTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiProcessCaptureTransaction
    */
    readonly idempotencyKey: string
    
} & CaptureRequest

/**
 * Request parameters for processPreauthTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiProcessPreauthTransactionRequest
 */
export type PaymentApiProcessPreauthTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiProcessPreauthTransaction
    */
    readonly idempotencyKey: string
    
} & PurchaseRequest

/**
 * Request parameters for processPurchaseTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiProcessPurchaseTransactionRequest
 */
export type PaymentApiProcessPurchaseTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiProcessPurchaseTransaction
    */
    readonly idempotencyKey: string
    
} & PurchaseRequest

/**
 * Request parameters for processRefundTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiProcessRefundTransactionRequest
 */
export type PaymentApiProcessRefundTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiProcessRefundTransaction
    */
    readonly idempotencyKey: string
    
} & RefundRequest

/**
 * Request parameters for processWithdrawalTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiProcessWithdrawalTransactionRequest
 */
export type PaymentApiProcessWithdrawalTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiProcessWithdrawalTransaction
    */
    readonly idempotencyKey: string
    
} & WithdrawRequest

/**
 * Request parameters for reverseTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiReverseTransactionRequest
 */
export type PaymentApiReverseTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiReverseTransaction
    */
    readonly idempotencyKey: string
    
} & RefundRequest1

/**
 * Request parameters for verifyTransaction operation in PaymentApi.
 * @export
 * @interface PaymentApiVerifyTransactionRequest
 */
export type PaymentApiVerifyTransactionRequest = {
    
    /**
    * Idempotency Key. Alphanumeric 25-characters
    * @type {string}
    * @memberof PaymentApiVerifyTransaction
    */
    readonly idempotencyKey: string
    
} & VerifyRequest

/**
 * PaymentApiGenerated - object-oriented interface
 * @export
 * @class PaymentApiGenerated
 * @extends {BaseAPI}
 */
export class PaymentApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Process Capture Transaction
     * @param {PaymentApiProcessCaptureTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public processCaptureTransaction(requestParameters: PaymentApiProcessCaptureTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).processCaptureTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Preauth Transaction
     * @param {PaymentApiProcessPreauthTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public processPreauthTransaction(requestParameters: PaymentApiProcessPreauthTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).processPreauthTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Purchase Transaction
     * @param {PaymentApiProcessPurchaseTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public processPurchaseTransaction(requestParameters: PaymentApiProcessPurchaseTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).processPurchaseTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Refund Transaction
     * @param {PaymentApiProcessRefundTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public processRefundTransaction(requestParameters: PaymentApiProcessRefundTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).processRefundTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Withdraw Transaction
     * @param {PaymentApiProcessWithdrawalTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public processWithdrawalTransaction(requestParameters: PaymentApiProcessWithdrawalTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).processWithdrawalTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Reverse Transaction
     * @param {PaymentApiReverseTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public reverseTransaction(requestParameters: PaymentApiReverseTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).reverseTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Process Verify Transaction
     * @param {PaymentApiVerifyTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApiGenerated
     */
    public verifyTransaction(requestParameters: PaymentApiVerifyTransactionRequest, options?: AxiosRequestConfig) {
        return PaymentApiFp(this.configuration).verifyTransaction(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

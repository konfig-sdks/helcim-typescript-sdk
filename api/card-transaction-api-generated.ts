/* tslint:disable */
/* eslint-disable */
/*
The Helcim API

This API covers publicly accessible merchant actions

The version of the OpenAPI document: 2.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FailedPaymentResponse } from '../models';
// @ts-ignore
import { SuccessfulPaymentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardTransactionApi - axios parameter creator
 * @export
 */
export const CardTransactionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Collects up to 1000 Card Transactions
         * @param {string} [dateFrom] Filters transactions created from 2020-01-01 (Mountain Time)
         * @param {string} [dateTo] Filters transactions created until 2021-01-01 (Mountain Time)
         * @param {string} [search] Searches amount, card number(F4L4 only), cardholder name, &amp; approval codes
         * @param {string} [customerCode] The code of the customer associated with the transaction
         * @param {string} [invoiceNumber] The number of the invoice associated with the transaction
         * @param {string} [cardToken] The token of the card associated with the transaction
         * @param {number} [cardBatchId] The id of the batch associated with the transaction
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions: async (dateFrom?: string, dateTo?: string, search?: string, customerCode?: string, invoiceNumber?: string, cardToken?: string, cardBatchId?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/card-transactions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (dateFrom !== undefined) {
                localVarQueryParameter['dateFrom'] = dateFrom;
            }

            if (dateTo !== undefined) {
                localVarQueryParameter['dateTo'] = dateTo;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (customerCode !== undefined) {
                localVarQueryParameter['customerCode'] = customerCode;
            }

            if (invoiceNumber !== undefined) {
                localVarQueryParameter['invoiceNumber'] = invoiceNumber;
            }

            if (cardToken !== undefined) {
                localVarQueryParameter['cardToken'] = cardToken;
            }

            if (cardBatchId !== undefined) {
                localVarQueryParameter['cardBatchId'] = cardBatchId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/card-transactions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Card Transaction by id
         * @param {number} cardTransactionId The Card Transaction Id of the Card Transaction you want to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById: async (cardTransactionId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cardTransactionId' is not null or undefined
            assertParamExists('getById', 'cardTransactionId', cardTransactionId)
            const localVarPath = `/card-transactions/{cardTransactionId}`
                .replace(`{${"cardTransactionId"}}`, encodeURIComponent(String(cardTransactionId !== undefined ? cardTransactionId : `-cardTransactionId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/card-transactions/{cardTransactionId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardTransactionApi - functional programming interface
 * @export
 */
export const CardTransactionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardTransactionApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Collects up to 1000 Card Transactions
         * @param {CardTransactionApiCollectTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectTransactions(requestParameters: CardTransactionApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SuccessfulPaymentResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.collectTransactions(requestParameters.dateFrom, requestParameters.dateTo, requestParameters.search, requestParameters.customerCode, requestParameters.invoiceNumber, requestParameters.cardToken, requestParameters.cardBatchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Card Transaction by id
         * @param {CardTransactionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getById(requestParameters: CardTransactionApiGetByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SuccessfulPaymentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getById(requestParameters.cardTransactionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardTransactionApi - factory interface
 * @export
 */
export const CardTransactionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardTransactionApiFp(configuration)
    return {
        /**
         * 
         * @summary Collects up to 1000 Card Transactions
         * @param {CardTransactionApiCollectTransactionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectTransactions(requestParameters: CardTransactionApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<SuccessfulPaymentResponse>> {
            return localVarFp.collectTransactions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Card Transaction by id
         * @param {CardTransactionApiGetByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getById(requestParameters: CardTransactionApiGetByIdRequest, options?: AxiosRequestConfig): AxiosPromise<SuccessfulPaymentResponse> {
            return localVarFp.getById(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for collectTransactions operation in CardTransactionApi.
 * @export
 * @interface CardTransactionApiCollectTransactionsRequest
 */
export type CardTransactionApiCollectTransactionsRequest = {
    
    /**
    * Filters transactions created from 2020-01-01 (Mountain Time)
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly dateFrom?: string
    
    /**
    * Filters transactions created until 2021-01-01 (Mountain Time)
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly dateTo?: string
    
    /**
    * Searches amount, card number(F4L4 only), cardholder name, & approval codes
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly search?: string
    
    /**
    * The code of the customer associated with the transaction
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly customerCode?: string
    
    /**
    * The number of the invoice associated with the transaction
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly invoiceNumber?: string
    
    /**
    * The token of the card associated with the transaction
    * @type {string}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly cardToken?: string
    
    /**
    * The id of the batch associated with the transaction
    * @type {number}
    * @memberof CardTransactionApiCollectTransactions
    */
    readonly cardBatchId?: number
    
}

/**
 * Request parameters for getById operation in CardTransactionApi.
 * @export
 * @interface CardTransactionApiGetByIdRequest
 */
export type CardTransactionApiGetByIdRequest = {
    
    /**
    * The Card Transaction Id of the Card Transaction you want to get
    * @type {number}
    * @memberof CardTransactionApiGetById
    */
    readonly cardTransactionId: number
    
}

/**
 * CardTransactionApiGenerated - object-oriented interface
 * @export
 * @class CardTransactionApiGenerated
 * @extends {BaseAPI}
 */
export class CardTransactionApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Collects up to 1000 Card Transactions
     * @param {CardTransactionApiCollectTransactionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTransactionApiGenerated
     */
    public collectTransactions(requestParameters: CardTransactionApiCollectTransactionsRequest = {}, options?: AxiosRequestConfig) {
        return CardTransactionApiFp(this.configuration).collectTransactions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Card Transaction by id
     * @param {CardTransactionApiGetByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTransactionApiGenerated
     */
    public getById(requestParameters: CardTransactionApiGetByIdRequest, options?: AxiosRequestConfig) {
        return CardTransactionApiFp(this.configuration).getById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/*
The Helcim API

This API covers publicly accessible merchant actions

The version of the OpenAPI document: 2.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CardTerminal } from '../models';
// @ts-ignore
import { CardTerminalsRequest } from '../models';
// @ts-ignore
import { FailedPaymentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CardTerminalApi - axios parameter creator
 * @export
 */
export const CardTerminalApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get card terminals
         * @param {CardTerminalsRequest} [cardTerminalsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll: async (cardTerminalsRequest?: CardTerminalsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/card-terminals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: cardTerminalsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/card-terminals',
                httpMethod: 'GET'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(cardTerminalsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CardTerminalApi - functional programming interface
 * @export
 */
export const CardTerminalApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CardTerminalApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get card terminals
         * @param {CardTerminalApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAll(requestParameters: CardTerminalApiGetAllRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardTerminal>>> {
            const cardTerminalsRequest: CardTerminalsRequest = {
                currency: requestParameters.currency,
                status: requestParameters.status
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAll(cardTerminalsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CardTerminalApi - factory interface
 * @export
 */
export const CardTerminalApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CardTerminalApiFp(configuration)
    return {
        /**
         * 
         * @summary Get card terminals
         * @param {CardTerminalApiGetAllRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAll(requestParameters: CardTerminalApiGetAllRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<CardTerminal>> {
            return localVarFp.getAll(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAll operation in CardTerminalApi.
 * @export
 * @interface CardTerminalApiGetAllRequest
 */
export type CardTerminalApiGetAllRequest = {
    
} & CardTerminalsRequest

/**
 * CardTerminalApiGenerated - object-oriented interface
 * @export
 * @class CardTerminalApiGenerated
 * @extends {BaseAPI}
 */
export class CardTerminalApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get card terminals
     * @param {CardTerminalApiGetAllRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CardTerminalApiGenerated
     */
    public getAll(requestParameters: CardTerminalApiGetAllRequest = {}, options?: AxiosRequestConfig) {
        return CardTerminalApiFp(this.configuration).getAll(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

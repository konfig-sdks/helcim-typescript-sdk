/* tslint:disable */
/* eslint-disable */
/*
The Helcim API

This API covers publicly accessible merchant actions

The version of the OpenAPI document: 2.0.0


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Address } from '../models';
// @ts-ignore
import { BankAccountResponse } from '../models';
// @ts-ignore
import { CardResponse } from '../models';
// @ts-ignore
import { Customer } from '../models';
// @ts-ignore
import { CustomerRequest } from '../models';
// @ts-ignore
import { CustomerUpdateRequest } from '../models';
// @ts-ignore
import { FailedPaymentResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create customer
         * @param {CustomerRequest} [customerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomer: async (customerRequest?: CustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer bank account
         * @param {number} customerId The Id of the customer
         * @param {number} bankAccountId The Id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount: async (customerId: number, bankAccountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBankAccount', 'customerId', customerId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('getBankAccount', 'bankAccountId', bankAccountId)
            const localVarPath = `/customers/{customerId}/bank-accounts/{bankAccountId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId !== undefined ? bankAccountId : `-bankAccountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}/bank-accounts/{bankAccountId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer bank accounts
         * @param {number} customerId The Id of the customer
         * @param {string} [bankToken] The bank account token.
         * @param {number} [verified] Check if bank account is verified or not. use 1 or 0.
         * @param {number} [ready] Check if bank account is ready or not. use 1 or 0.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts: async (customerId: number, bankToken?: string, verified?: number, ready?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getBankAccounts', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}/bank-accounts`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (bankToken !== undefined) {
                localVarQueryParameter['bankToken'] = bankToken;
            }

            if (verified !== undefined) {
                localVarQueryParameter['verified'] = verified;
            }

            if (ready !== undefined) {
                localVarQueryParameter['ready'] = ready;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}/bank-accounts',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer card
         * @param {number} customerId The Id of the customer
         * @param {number} cardId The Id of the card
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardDetails: async (customerId: number, cardId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCardDetails', 'customerId', customerId)
            // verify required parameter 'cardId' is not null or undefined
            assertParamExists('getCardDetails', 'cardId', cardId)
            const localVarPath = `/customers/{customerId}/cards/{cardId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"cardId"}}`, encodeURIComponent(String(cardId !== undefined ? cardId : `-cardId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}/cards/{cardId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer cards
         * @param {number} customerId The Id of the customer
         * @param {string} [cardToken] The card token.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards: async (customerId: number, cardToken?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCards', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}/cards`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (cardToken !== undefined) {
                localVarQueryParameter['cardToken'] = cardToken;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}/cards',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customer
         * @param {number} customerId The Id of the customer
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer: async (customerId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('getCustomer', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get customers
         * @param {string} [search] The search term to be used for partial matching on contactName, businessName, customerCode, city, phone and email (Only use one query field per request).
         * @param {string} [customerCode] Existing customer code (Only use one query field per request).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (search?: string, customerCode?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/customers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })
            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (customerCode !== undefined) {
                localVarQueryParameter['customerCode'] = customerCode;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set customer bank account as default
         * @param {number} customerId The Id of the customer
         * @param {number} bankAccountId The Id of the bank account
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBankAccountDefault: async (customerId: number, bankAccountId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('setBankAccountDefault', 'customerId', customerId)
            // verify required parameter 'bankAccountId' is not null or undefined
            assertParamExists('setBankAccountDefault', 'bankAccountId', bankAccountId)
            const localVarPath = `/customers/{customerId}/bank-accounts/{bankAccountId}/default`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)))
                .replace(`{${"bankAccountId"}}`, encodeURIComponent(String(bankAccountId !== undefined ? bankAccountId : `-bankAccountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}/bank-accounts/{bankAccountId}/default',
                httpMethod: 'PATCH'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update customer
         * @param {string} customerId The Id of the customer
         * @param {CustomerUpdateRequest} [customerUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (customerId: string, customerUpdateRequest?: CustomerUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'customerId' is not null or undefined
            assertParamExists('updateDetails', 'customerId', customerId)
            const localVarPath = `/customers/{customerId}`
                .replace(`{${"customerId"}}`, encodeURIComponent(String(customerId !== undefined ? customerId : `-customerId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiAccessAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "api-token", keyParamName: "apiAccessAuth", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/customers/{customerId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create customer
         * @param {CustomerApiCreateNewCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCustomer(requestParameters: CustomerApiCreateNewCustomerRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const customerRequest: CustomerRequest = {
                customerCode: requestParameters.customerCode,
                contactName: requestParameters.contactName,
                businessName: requestParameters.businessName,
                cellPhone: requestParameters.cellPhone,
                billingAddress: requestParameters.billingAddress,
                shippingAddress: requestParameters.shippingAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCustomer(customerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customer bank account
         * @param {CustomerApiGetBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccount(requestParameters: CustomerApiGetBankAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccount(requestParameters.customerId, requestParameters.bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customer bank accounts
         * @param {CustomerApiGetBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBankAccounts(requestParameters: CustomerApiGetBankAccountsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBankAccounts(requestParameters.customerId, requestParameters.bankToken, requestParameters.verified, requestParameters.ready, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customer card
         * @param {CustomerApiGetCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCardDetails(requestParameters: CustomerApiGetCardDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCardDetails(requestParameters.customerId, requestParameters.cardId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customer cards
         * @param {CustomerApiGetCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCards(requestParameters: CustomerApiGetCardsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CardResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCards(requestParameters.customerId, requestParameters.cardToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customer
         * @param {CustomerApiGetCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomer(requestParameters: CustomerApiGetCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomer(requestParameters.customerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get customers
         * @param {CustomerApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CustomerApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Customer>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.search, requestParameters.customerCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Set customer bank account as default
         * @param {CustomerApiSetBankAccountDefaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setBankAccountDefault(requestParameters: CustomerApiSetBankAccountDefaultRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BankAccountResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setBankAccountDefault(requestParameters.customerId, requestParameters.bankAccountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update customer
         * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Customer>> {
            const customerUpdateRequest: CustomerUpdateRequest = {
                customerCode: requestParameters.customerCode,
                contactName: requestParameters.contactName,
                businessName: requestParameters.businessName,
                cellPhone: requestParameters.cellPhone,
                billingAddress: requestParameters.billingAddress,
                shippingAddress: requestParameters.shippingAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.customerId, customerUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Create customer
         * @param {CustomerApiCreateNewCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomer(requestParameters: CustomerApiCreateNewCustomerRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.createNewCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer bank account
         * @param {CustomerApiGetBankAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccount(requestParameters: CustomerApiGetBankAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BankAccountResponse>> {
            return localVarFp.getBankAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer bank accounts
         * @param {CustomerApiGetBankAccountsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBankAccounts(requestParameters: CustomerApiGetBankAccountsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BankAccountResponse>> {
            return localVarFp.getBankAccounts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer card
         * @param {CustomerApiGetCardDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCardDetails(requestParameters: CustomerApiGetCardDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CardResponse>> {
            return localVarFp.getCardDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer cards
         * @param {CustomerApiGetCardsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCards(requestParameters: CustomerApiGetCardsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CardResponse>> {
            return localVarFp.getCards(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customer
         * @param {CustomerApiGetCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomer(requestParameters: CustomerApiGetCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.getCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get customers
         * @param {CustomerApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CustomerApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<Customer>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set customer bank account as default
         * @param {CustomerApiSetBankAccountDefaultRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setBankAccountDefault(requestParameters: CustomerApiSetBankAccountDefaultRequest, options?: AxiosRequestConfig): AxiosPromise<Array<BankAccountResponse>> {
            return localVarFp.setBankAccountDefault(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update customer
         * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Customer> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiCreateNewCustomerRequest
 */
export type CustomerApiCreateNewCustomerRequest = {
    
} & CustomerRequest

/**
 * Request parameters for getBankAccount operation in CustomerApi.
 * @export
 * @interface CustomerApiGetBankAccountRequest
 */
export type CustomerApiGetBankAccountRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiGetBankAccount
    */
    readonly customerId: number
    
    /**
    * The Id of the bank account
    * @type {number}
    * @memberof CustomerApiGetBankAccount
    */
    readonly bankAccountId: number
    
}

/**
 * Request parameters for getBankAccounts operation in CustomerApi.
 * @export
 * @interface CustomerApiGetBankAccountsRequest
 */
export type CustomerApiGetBankAccountsRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiGetBankAccounts
    */
    readonly customerId: number
    
    /**
    * The bank account token.
    * @type {string}
    * @memberof CustomerApiGetBankAccounts
    */
    readonly bankToken?: string
    
    /**
    * Check if bank account is verified or not. use 1 or 0.
    * @type {number}
    * @memberof CustomerApiGetBankAccounts
    */
    readonly verified?: number
    
    /**
    * Check if bank account is ready or not. use 1 or 0.
    * @type {number}
    * @memberof CustomerApiGetBankAccounts
    */
    readonly ready?: number
    
}

/**
 * Request parameters for getCardDetails operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCardDetailsRequest
 */
export type CustomerApiGetCardDetailsRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiGetCardDetails
    */
    readonly customerId: number
    
    /**
    * The Id of the card
    * @type {number}
    * @memberof CustomerApiGetCardDetails
    */
    readonly cardId: number
    
}

/**
 * Request parameters for getCards operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCardsRequest
 */
export type CustomerApiGetCardsRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiGetCards
    */
    readonly customerId: number
    
    /**
    * The card token.
    * @type {string}
    * @memberof CustomerApiGetCards
    */
    readonly cardToken?: string
    
}

/**
 * Request parameters for getCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCustomerRequest
 */
export type CustomerApiGetCustomerRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiGetCustomer
    */
    readonly customerId: number
    
}

/**
 * Request parameters for list operation in CustomerApi.
 * @export
 * @interface CustomerApiListRequest
 */
export type CustomerApiListRequest = {
    
    /**
    * The search term to be used for partial matching on contactName, businessName, customerCode, city, phone and email (Only use one query field per request).
    * @type {string}
    * @memberof CustomerApiList
    */
    readonly search?: string
    
    /**
    * Existing customer code (Only use one query field per request).
    * @type {string}
    * @memberof CustomerApiList
    */
    readonly customerCode?: string
    
}

/**
 * Request parameters for setBankAccountDefault operation in CustomerApi.
 * @export
 * @interface CustomerApiSetBankAccountDefaultRequest
 */
export type CustomerApiSetBankAccountDefaultRequest = {
    
    /**
    * The Id of the customer
    * @type {number}
    * @memberof CustomerApiSetBankAccountDefault
    */
    readonly customerId: number
    
    /**
    * The Id of the bank account
    * @type {number}
    * @memberof CustomerApiSetBankAccountDefault
    */
    readonly bankAccountId: number
    
}

/**
 * Request parameters for updateDetails operation in CustomerApi.
 * @export
 * @interface CustomerApiUpdateDetailsRequest
 */
export type CustomerApiUpdateDetailsRequest = {
    
    /**
    * The Id of the customer
    * @type {string}
    * @memberof CustomerApiUpdateDetails
    */
    readonly customerId: string
    
} & CustomerUpdateRequest

/**
 * CustomerApiGenerated - object-oriented interface
 * @export
 * @class CustomerApiGenerated
 * @extends {BaseAPI}
 */
export class CustomerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create customer
     * @param {CustomerApiCreateNewCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public createNewCustomer(requestParameters: CustomerApiCreateNewCustomerRequest = {}, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).createNewCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer bank account
     * @param {CustomerApiGetBankAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getBankAccount(requestParameters: CustomerApiGetBankAccountRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getBankAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer bank accounts
     * @param {CustomerApiGetBankAccountsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getBankAccounts(requestParameters: CustomerApiGetBankAccountsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getBankAccounts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer card
     * @param {CustomerApiGetCardDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getCardDetails(requestParameters: CustomerApiGetCardDetailsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCardDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer cards
     * @param {CustomerApiGetCardsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getCards(requestParameters: CustomerApiGetCardsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCards(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customer
     * @param {CustomerApiGetCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getCustomer(requestParameters: CustomerApiGetCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get customers
     * @param {CustomerApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public list(requestParameters: CustomerApiListRequest = {}, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set customer bank account as default
     * @param {CustomerApiSetBankAccountDefaultRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public setBankAccountDefault(requestParameters: CustomerApiSetBankAccountDefaultRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).setBankAccountDefault(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update customer
     * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
